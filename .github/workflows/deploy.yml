name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_MAIN: ${{ github.repository }}/main-server
  IMAGE_NAME_MCP: ${{ github.repository }}/mcp-server

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    
    - name: Install dependencies
      run: |
        uv sync
    
    - name: Run tests
      run: |
        # 테스트가 있다면 여기서 실행
        echo "No tests configured yet"
    
    - name: Lint check
      run: |
        # 린터가 있다면 여기서 실행
        echo "No linter configured yet"

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Detect changes
      uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          main:
            - 'src/app/**'
            - 'Dockerfile.main'
          mcp:
            - 'src/mcp/**'
            - 'Dockerfile.mcp'
            - 'pyproject.toml'
            - 'uv.lock'
            - 'requirements.txt'
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata for main server
      id: meta-main
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_MAIN }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}
    
    
    - name: Extract metadata for MCP server
      id: meta-mcp
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_MCP }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push main server image
      if: steps.changes.outputs.main == 'true'
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.main
        push: true
        tags: ${{ steps.meta-main.outputs.tags }}
        labels: ${{ steps.meta-main.outputs.labels }}
    
    
    - name: Build and push MCP server image
      if: steps.changes.outputs.mcp == 'true'
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.mcp
        push: true
        tags: ${{ steps.meta-mcp.outputs.tags }}
        labels: ${{ steps.meta-mcp.outputs.labels }}
    
    - name: Deploy to EC2
      if: github.ref == 'refs/heads/main'
      run: |
        # SSH 키 설정
        echo "${{ secrets.EC2_SSH_KEY }}" > private_key.pem
        chmod 600 private_key.pem
        
        # EC2 인스턴스에 배포
        ssh -o StrictHostKeyChecking=no -i private_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          # GitHub Container Registry 로그인
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # 기존 컨테이너 중지 및 제거
          docker-compose -f docker-compose.yml down || true
          
          # 사용하지 않는 모든 이미지 정리 (컨테이너에서 사용하지 않는 이미지)
          docker image prune -a -f
          
          # 변경된 이미지만 pull
          if [ "${{ steps.changes.outputs.main }}" = "true" ]; then
            echo "Pulling main server image..."
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_MAIN }}:latest
          fi
          if [ "${{ steps.changes.outputs.mcp }}" = "true" ]; then
            echo "Pulling MCP server image..."
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_MCP }}:latest
          fi
          
          # docker-compose.yml 업데이트 (GitHub에서 가져오기)
          curl -o docker-compose.yml https://raw.githubusercontent.com/${{ github.repository }}/main/docker-compose.yml
          
          # 환경 변수 설정
          echo "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" > .env
          echo "SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}" >> .env
          echo "SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" >> .env
          echo "GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}" >> .env
          echo "CLAUDE_API_KEY=${{ secrets.CLAUDE_API_KEY }}" >> .env
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY
          echo "WEB_BASE_URL=${{ secrets.WEB_BASE_URL }}" >> .env
          echo "GITHUB_REPOSITORY=${{ github.repository }}" >> .env
          echo "SERVER_BASE_URL=${{ secrets.SERVER_BASE_URL }}" >> .env
          echo "PADDLE_WEBHOOK_SECRET=${{ secrets.PADDLE_WEBHOOK_SECRET }}" >> .env
          echo "PADDLE_WEBHOOK_STRICT_VERIFY=${{ secrets.PADDLE_WEBHOOK_STRICT_VERIFY }}" >> .env
          echo "PADDLE_PRICE_ID_MEMBERSHIP=${{ secrets.PADDLE_PRICE_ID_MEMBERSHIP }}" >> .env
          echo "PADDLE_PRICE_ID_CREDITS=${{ secrets.PADDLE_PRICE_ID_CREDITS }}" >> .env
          echo "CREDITS_UNIT_PRICE_USD=${{ secrets.CREDITS_UNIT_PRICE_USD }}" >> .env
          
          # 전체 스택 재시작 (의존성 때문에)
          echo "Restarting all services..."
          docker-compose down
          docker-compose up -d
          
          echo "배포 완료!"
        EOF
        
        # SSH 키 제거
        rm private_key.pem